Give a Query that finds, for two given nations, the gross discounted revenues derived from lineitems in which 
parts were shipped from a supplier in either nation to a customer in the other nation during 1995 and 1996. 
The query lists the supplier nation, the customer nation, the year, and the revenue from shipments that took place 
in that year. The query orders the answer by Supplier nation, Customer nation, and year (all ascending).

QUERY CONSTANTS:
NATION1 = FRANCE
NATION2 = GERMANY 
below is database schema 
 CREATE TABLE NATION  ( N_NATIONKEY  INTEGER NOT NULL,
                            N_NAME       CHAR(25) NOT NULL,
                            N_REGIONKEY  INTEGER NOT NULL,
                            N_COMMENT    VARCHAR(152));
 
CREATE TABLE REGION  ( R_REGIONKEY  INTEGER NOT NULL,
                            R_NAME       CHAR(25) NOT NULL,
                            R_COMMENT    VARCHAR(152));
 
CREATE TABLE PART  ( P_PARTKEY     INTEGER NOT NULL,
                          P_NAME        VARCHAR(55) NOT NULL,
                          P_MFGR        CHAR(25) NOT NULL,
                          P_BRAND       CHAR(10) NOT NULL,
                          P_TYPE        VARCHAR(25) NOT NULL,
                          P_SIZE        INTEGER NOT NULL,
                          P_CONTAINER   CHAR(10) NOT NULL,
                          P_RETAILPRICE DECIMAL(15,2) NOT NULL,
                          P_COMMENT     VARCHAR(23) NOT NULL );
 
CREATE TABLE SUPPLIER ( S_SUPPKEY     INTEGER NOT NULL,
                             S_NAME        CHAR(25) NOT NULL,
                             S_ADDRESS     VARCHAR(40) NOT NULL,
                             S_NATIONKEY   INTEGER NOT NULL,
                             S_PHONE       CHAR(15) NOT NULL,
                             S_ACCTBAL     DECIMAL(15,2) NOT NULL,
                             S_COMMENT     VARCHAR(101) NOT NULL);
 
CREATE TABLE PARTSUPP ( PS_PARTKEY     INTEGER NOT NULL,
                             PS_SUPPKEY     INTEGER NOT NULL,
                             PS_AVAILQTY    INTEGER NOT NULL,
                             PS_SUPPLYCOST  DECIMAL(15,2)  NOT NULL,
                             PS_COMMENT     VARCHAR(199) NOT NULL );
 
CREATE TABLE CUSTOMER ( C_CUSTKEY     INTEGER NOT NULL,
                             C_NAME        VARCHAR(25) NOT NULL,
                             C_ADDRESS     VARCHAR(40) NOT NULL,
                             C_NATIONKEY   INTEGER NOT NULL,
                             C_PHONE       CHAR(15) NOT NULL,
                             C_ACCTBAL     DECIMAL(15,2)   NOT NULL,
                             C_MKTSEGMENT  CHAR(10) NOT NULL,
                             C_COMMENT     VARCHAR(117) NOT NULL);
 
CREATE TABLE ORDERS  ( O_ORDERKEY       INTEGER NOT NULL,
                           O_CUSTKEY        INTEGER NOT NULL,
                           O_ORDERSTATUS    CHAR(1) NOT NULL,
                           O_TOTALPRICE     DECIMAL(15,2) NOT NULL,
                           O_ORDERDATE      DATE NOT NULL,
                           O_ORDERPRIORITY  CHAR(15) NOT NULL,
                           O_CLERK          CHAR(15) NOT NULL,
                           O_SHIPPRIORITY   INTEGER NOT NULL,
                           O_COMMENT        VARCHAR(79) NOT NULL);
 
CREATE TABLE LINEITEM ( L_ORDERKEY    INTEGER NOT NULL,
                             L_PARTKEY     INTEGER NOT NULL,
                             L_SUPPKEY     INTEGER NOT NULL,
                             L_LINENUMBER  INTEGER NOT NULL,
                             L_QUANTITY    DECIMAL(15,2) NOT NULL,
                             L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,
                             L_DISCOUNT    DECIMAL(15,2) NOT NULL,
                             L_TAX         DECIMAL(15,2) NOT NULL,
                             L_RETURNFLAG  CHAR(1) NOT NULL,
                             L_LINESTATUS  CHAR(1) NOT NULL,
                             L_SHIPDATE    DATE NOT NULL,
                             L_COMMITDATE  DATE NOT NULL,
                             L_RECEIPTDATE DATE NOT NULL,
                             L_SHIPINSTRUCT CHAR(25) NOT NULL,
                             L_SHIPMODE     CHAR(10) NOT NULL,
                             L_COMMENT      VARCHAR(44) NOT NULL); 
 You are an expert in SQL. Formulate SQL query that suits the following natural language text description in English. Only give the SQL, do not add any explanation. Do not keep any place-holder parameter in the query. Use valid data values as query constants, if the text does not mention them. Please ensure the SQL query is correct and optimized. Text:    Give a Query that finds, for two given nations, the gross discounted revenues derived from lineitems in which parts were shipped from a supplier in either nation to a customer in the other nation during 1995 and 1996. The query lists the supplier nation, the customer nation, the year, and the revenue from shipments that took place in that year. The query orders the answer by Supplier nation, Customer nation, and year (all ascending). The query constants are NATION1 = FRANCE and NATION2 = GERMANY.
Let's think step by step.

1. **Identify the tables involved**: The tables involved in this query are `LINEITEM`, `ORDERS`, `CUSTOMER`, `SUPPLIER`, and `NATION`.
2. **Join the tables**: We need to join `LINEITEM` with `ORDERS` on `L_ORDERKEY` and `O_ORDERKEY`, then join `ORDERS` with `CUSTOMER` on `O_CUSTKEY` and `C_CUSTKEY`, and `LINEITEM` with `SUPPLIER` on `L_SUPPKEY` and `S_SUPPKEY`. Finally, we join `SUPPLIER` and `CUSTOMER` with `NATION` on `S_NATIONKEY` and `C_NATIONKEY` respectively.
3. **Filter the data**: We need to filter the data to include only those records where the supplier is in either France or Germany and the customer is in the other nation. We also need to filter the data to include only those records where the shipment date is in 1995 or 1996.
4. **Calculate the gross discounted revenue**: The gross discounted revenue can be calculated as `L_EXTENDEDPRICE * (1 - L_DISCOUNT)`.
5. **Group and order the data**: We need to group the data by supplier nation, customer nation, and year, and then order the data by supplier nation, customer nation, and year in ascending order.

So, the final sqlite SQL query answer to the given question is:
```sql
SELECT 
    n1.n_name AS supplier_nation, 
    n2.n_name AS customer_nation, 
    STRFTIME('%Y', l.l_shipdate) AS year, 
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS gross_discounted_revenue
FROM 
    lineitem l
JOIN 
    orders o ON l.l_orderkey = o.o_orderkey
JOIN 
    customer c ON o.o_custkey = c.c_custkey
JOIN 
    supplier s ON l.l_suppkey = s.s_suppkey
JOIN 
    nation n1 ON s.s_nationkey = n1.n_nationkey
JOIN 
    nation n2 ON c.c_nationkey = n2.n_nationkey
WHERE 
    (n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY') 
    OR (n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE')
    AND STRFTIME('%Y', l.l_shipdate) BETWEEN '1995' AND '1996'
GROUP BY 
    supplier_nation, 
    customer_nation, 
    year
ORDER BY 
    supplier_nation, 
    customer_nation, 
    year;
```
Sorry, I reflected on my results and thought the SQL query will not match the expected output.
And I will try to find a correct SQL query

Let's analyze the given query and the error details step by step:

### Given SQL Query:
```sql
SELECT 
    n1.n_name AS supplier_nation, 
    n2.n_name AS customer_nation, 
    STRFTIME('%Y', l.l_shipdate) AS year, 
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS gross_discounted_revenue
FROM 
    lineitem l
JOIN 
    orders o ON l.l_orderkey = o.o_orderkey
JOIN 
    customer c ON o.o_custkey = c.c_custkey
JOIN 
    supplier s ON l.l_suppkey = s.s_suppkey
JOIN 
    nation n1 ON s.s_nationkey = n1.n_nationkey
JOIN 
    nation n2 ON c.c_nationkey = n2.n_nationkey
WHERE 
    (n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY') 
    OR (n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE')
    AND STRFTIME('%Y', l.l_shipdate) BETWEEN '1995' AND '1996'
GROUP BY 
    supplier_nation, 
    customer_nation, 
    year
ORDER BY 
    supplier_nation, 
    customer_nation, 
    year;
```

### Issues Identified:
1. **Redundant `BETWEEN` Clause**: The `BETWEEN` clause is correctly used, but it might not be causing the error.
2. **String Function Error**: The error detail mentions "String function could not convert string to a numeric value". This typically happens when there's an issue with the `STRFTIME` function.
3. **Case Sensitivity**: The original query uses `BETWEEN '1995' AND '1996'`, which is correct, but the error suggests an issue with `STRFTIME`. We should check if the column `l_shipdate` is indeed a `DATE` type and if there's no issue with it.

### Correct SQL Query:
The provided correct SQL query has some issues in the `CASE WHEN` structure, which is not necessary in this case. We can use `STRFTIME` directly in the `WHERE` clause and `SELECT` statement.

Let's correct the query based on the above analysis:

```sql
SELECT 
    n1.n_name AS supplier_nation, 
    n2.n_name AS customer_nation, 
    STRFTIME('%Y', l.l_shipdate) AS year, 
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS gross_discounted_revenue
FROM 
    lineitem l
JOIN 
    orders o ON l.l_orderkey = o.o_orderkey
JOIN 
    customer c ON o.o_custkey = c.c_custkey
JOIN 
    supplier s ON l.l_suppkey = s.s_suppkey
JOIN 
    nation n1 ON s.s_nationkey = n1.n_nationkey
JOIN 
    nation n2 ON c.c_nationkey = n2.n_nationkey
WHERE 
    (n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY') 
    OR (n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE')
    AND STRFTIME('%Y', l.l_shipdate) IN ('1995', '1996')
GROUP BY 
    n1.n_name, 
    n2.n_name, 
    STRFTIME('%Y', l.l_shipdate)
ORDER BY 
    n1.n_name, 
    n2.n_name, 
    STRFTIME('%Y', l.l_shipdate);
```

### Explanation:
1. **`WHERE` Clause**: We use `IN ('1995', '1996')` instead of `BETWEEN` for clarity and correctness.
2. **`GROUP BY` Clause**: We group by `n1.n_name`, `n2.n_name`, and `STRFTIME('%Y', l.l_shipdate)` to ensure proper aggregation.
3. **`ORDER BY` Clause**: We order by `n1.n_name`, `n2.n_name`, and `STRFTIME('%Y', l.l_shipdate)` to sort the results by supplier nation, customer nation, and year in ascending order.

This query should now match the expected output.